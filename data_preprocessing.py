# -*- coding: utf-8 -*-
"""Data preprocessing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jmpAilAE8hiJYqepu1U0dUJ0X6s7XuG8
"""

from google.colab import drive
drive.mount('/content/drive/')

import cv2
import os
from PIL import Image, ImageOps, ImageEnhance
import matplotlib.pyplot as plt
import numpy as np

# Directory containing your images
dataset_dir = '/content/drive/MyDrive/food'

# List all files in the directory
files = os.listdir(dataset_dir)

# Iterate over each file
for file in files:
    if file.endswith('.jpg') or file.endswith('.png'):  # Adjust based on your image formats
        # Construct full file path
        file_path = os.path.join(dataset_dir, file)

        # Open the image using PIL
        image = Image.open(file_path)

        # Display the image
        plt.imshow(image)
        plt.title(file)  # Set title as filename
        plt.axis('off')  # Turn off axis labels
        plt.show()

# Function to set resolution (optional)
def set_resolution(img, width, height):
    return cv2.resize(img, (width, height))

# Function to rotate image (optional)
def rotate_image(img, angle):
    (h, w) = img.shape[:2]
    center = (w // 2, h // 2)
    M = cv2.getRotationMatrix2D(center, angle, 1.0)
    rotated = cv2.warpAffine(img, M, (w, h))
    return rotated

# Function to flip image (optional)
def flip_image(img, flip_code):
    return cv2.flip(img, flip_code)

def preprocess_images(images):
    processed_images = []
    for img in images:
        try:
            # Convert PIL Image to NumPy array if it's a PIL image
            if isinstance(img, Image.Image):
                img = np.array(img)
            #if the image is not an numpy array it raises a value error
            elif not isinstance(img, np.ndarray):
                raise ValueError("Invalid image format")

            # Convert to RGB if not already (assuming loaded as BGR)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

            # Set resolution (optional, specify your desired width and height)
            img = set_resolution(img, 255, 255)  # Example resolution

            # Rotate image (optional, specify your desired angle in degrees)
            img = rotate_image(img, 45)  # Example rotation angle

            # Flip image (optional, specify flip code: 1 for horizontal flip, 0 for vertical flip)
            img = flip_image(img, 1)  # Example horizontal flip

            processed_images.append(img)
        except Exception as e:
            print(f"Error in processing image: {e}")
            continue

    return processed_images

# Function to display images
def display_images(images):
    plt.figure(figsize=(5, 5))
    for i, img in enumerate(images, 1):
        plt.subplot(1, len(images), i)
        plt.imshow(img)
        plt.axis('off')
    plt.show()
if not isinstance(image, list):
    image = [image]
else:
  image=image
# Preprocess images
processed_images = preprocess_images(image)

# Display processed images
display_images(processed_images)

